enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?

    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())

    organizationRoles OrganizationRole[]

    expenses          Expense[]          @relation("user")
    groupMembers      GroupMember[]      @relation("user")
    payments          Payment[]          @relation("user")
    notifications     Notification[]     @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Category {

    id             String        @id @default(uuid())
    name           String
    budgetLimit    String?
    type           String?

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    expenses       Expense[]     @relation("category")
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Project {

    id             String        @id @default(uuid())
    name           String
    description    String?
    status         String?

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    expenses       Expense[]     @relation("project")
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Group {

    id             String        @id @default(uuid())
    name           String
    description    String?

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    expenses       Expense[]     @relation("group")
    groupMembers   GroupMember[] @relation("group")
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Expense {

    id                String        @id @default(uuid())
    amount            String
    description       String?
    date              String
    isRecurring       Boolean
    recurringSchedule String?
    taxCategory       String?

    organizationId    String
    organization      Organization? @relation(fields: [organizationId], references: [id], name: "organization")
    userId            String
    user              User?         @relation(fields: [userId], references: [id], name: "user")
    categoryId        String?
    category          Category?     @relation(fields: [categoryId], references: [id], name: "category")
    projectId         String?
    project           Project?      @relation(fields: [projectId], references: [id], name: "project")
    groupId           String?
    group             Group?        @relation(fields: [groupId], references: [id], name: "group")

    payments          Payment[]     @relation("expense")
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model GroupMember {

    id              String   @id @default(uuid())
    permissionLevel String

    groupId         String
    group           Group?   @relation(fields: [groupId], references: [id], name: "group")
    userId          String
    user            User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Payment {

    id             String        @id @default(uuid())
    amount         String
    paymentMethod  String?
    status         String?

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    expenseId      String
    expense        Expense?      @relation(fields: [expenseId], references: [id], name: "expense")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Notification {

    id          String   @id @default(uuid())
    type        String
    message     String
    status      String?
    referenceId String?

    userId      String
    user        User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Organization {
    id         String             @id @default(uuid())
    name       String
    pictureUrl String?            @default('https://i.imgur.com/BgkFiid.jpeg')

    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt @default(now())
    roles      OrganizationRole[]

    categorys  Category[]         @relation("organization")
    projects   Project[]          @relation("organization")
    groups     Group[]            @relation("organization")
    expenses   Expense[]          @relation("organization")
    payments   Payment[]          @relation("organization")

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}

model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String       @default(auth().id)
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

